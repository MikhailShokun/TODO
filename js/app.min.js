/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nconst input = document.querySelector('.tasks__input'),\r\n    container = document.querySelector('.tasks__list'),\r\n\r\n\r\n    allTasks = document.querySelector('.counter__all-span'),\r\n    checkedTasks = document.querySelector('.counter__checked-span'),\r\n    uncheckedTasks = document.querySelector('.counter__unchecked-span'),\r\n    clearButton = document.querySelector('.btn-clear');\r\n\r\n\r\nlet state = [];\r\n\r\nlet checkedCounter = 0;\r\nlet uncheckedCounter = 0;\r\nlet allCounter = 0;\r\n\r\n\r\n// input function\r\ninput.addEventListener('keyup', (event) => {\r\n    event.preventDefault();\r\n    if (event.keyCode === 13) {\r\n        if (event.target.value != '') {\r\n            addTaskToState(event.target.value.trim());\r\n            changeStatus();\r\n            renderTasks(state);\r\n            event.target.value = '';\r\n            throughText();\r\n        }\r\n    }\r\n})\r\n\r\n// добавление таска в массив\r\nfunction addTaskToState(title) {\r\n    state.push({ id: generateId(), title: title, checked: false })\r\n    allCounter = state.length;\r\n}\r\n\r\n// генерация id\r\nlet currentId = 1;\r\n\r\nfunction generateId() {\r\n    return currentId++;\r\n}\r\n\r\n\r\n// изменение счетчиков текущих тасков\r\nfunction changeStatus() {\r\n    checkedCounter = 0;\r\n    uncheckedCounter = 0;\r\n    state.forEach(task =>\r\n        task.checked ? checkedCounter++ : uncheckedCounter++)\r\n}\r\n\r\n\r\n// обовление списка тасков\r\nfunction renderTasks(state) {\r\n    container.innerHTML = '';\r\n    state.forEach(task => {\r\n        container.innerHTML +=\r\n            `\r\n           <div class=\"list__item ${task.checked ? 'checked' : 'unchecked'}\" data-id=\"${task.id}\">\r\n               <li class=\"list__item-text\">${task.title}</li>\r\n               <span class=\"list__item-delete\">❌</span>\r\n           </div>\r\n            `\r\n    })\r\n    checkedTasks.innerHTML = checkedCounter;\r\n    uncheckedTasks.innerHTML = uncheckedCounter;\r\n    allTasks.innerHTML = allCounter;\r\n\r\n    rerenderListeners();\r\n}\r\n\r\n\r\nfunction rerenderListeners() {\r\n    let listItems = document.querySelectorAll('.list__item');\r\n    listItems.forEach(listItem => {\r\n        listItem.addEventListener('click', function(event) {\r\n\r\n            let targetItem = event.target;\r\n\r\n            if (targetItem.closest('li')) {\r\n                let taskId = listItem.getAttribute('data-id');\r\n                let newTask = {\r\n                    ...state.find(elem => elem.id == taskId),\r\n                    checked: !state.find(elem => elem.id == taskId).checked\r\n                }\r\n                state = state.filter(task => task.id != taskId);\r\n                state = [...state, newTask];\r\n\r\n                if (newTask.checked) {\r\n                    listItem.classList.add('list__item-text_through');\r\n                    checkedCounter++;\r\n                    uncheckedCounter--;\r\n                } else {\r\n                    listItem.classList.remove('list__item-text_through');\r\n                    checkedCounter--;\r\n                    uncheckedCounter++;\r\n                }\r\n\r\n\r\n                checkedTasks.innerHTML = checkedCounter;\r\n                uncheckedTasks.innerHTML = uncheckedCounter;\r\n            }\r\n\r\n            // удаление таска\r\n            if (targetItem.closest('.list__item-delete')) {\r\n                let deleteTaskId = listItem.getAttribute('data-id');\r\n                if (listItem.classList.contains('list__item-text_through')) { checkedCounter-- } else {\r\n                    uncheckedCounter--\r\n                }\r\n                listItem.remove();\r\n                state = state.filter(task => +task.id != +deleteTaskId);\r\n                allCounter = state.length;\r\n\r\n                checkedTasks.innerHTML = checkedCounter;\r\n                uncheckedTasks.innerHTML = uncheckedCounter;\r\n                allTasks.innerHTML = allCounter;\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nfunction throughText() {\r\n    let taskItems = document.querySelectorAll('.list__item');\r\n    taskItems.forEach(taskItem => {\r\n        if (taskItem.classList.contains('checked')) {\r\n            taskItem.classList.add('list__item-text_through')\r\n        }\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\nconst buttonsField = document.querySelector('.counter')\r\nbuttonsField.addEventListener('click', function(event) {\r\n    let target = event.target;\r\n\r\n    if (target.closest('.allCounter')) {\r\n        renderTasks(state);\r\n        throughText()\r\n    }\r\n\r\n    if (target.closest('.checkedCounter')) {\r\n        let checkedState = state.filter(item => {\r\n            return item.checked == true;\r\n        })\r\n\r\n        renderTasks(checkedState);\r\n        throughText();\r\n    }\r\n\r\n    if (target.closest('.uncheckedCounter')) {\r\n        let uncheckedState = state.filter(item => {\r\n            return item.checked == false;\r\n        })\r\n        renderTasks(uncheckedState);\r\n    }\r\n\r\n    if (target.closest('.clear')) {\r\n        state = [];\r\n        allCounter = 0;\r\n        checkedCounter = 0;\r\n        uncheckedCounter = 0;\r\n        renderTasks(state);\r\n    }\r\n})\r\n\r\n\r\nchangeStatus();\r\nrenderTasks(state);\n\n//# sourceURL=webpack://gulp-2022/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;